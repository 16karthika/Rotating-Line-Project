import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionAdapter;

import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.event.MenuDragMouseListener;


public class Display {
	
	public static JFrame makeFrame(int width, int height) {
		final JFrame frame = new JFrame();	
		frame.setTitle("Puzzle");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setMinimumSize(new Dimension(600, 600));
		frame.setSize(width, height);
		frame.setVisible(true);
		return frame;
	}
	
	/*public void paintComponent(Graphics g) {
		Graphics2D g2 = (Graphics2D) g;
		g2.drawRect(1,1,100,100);
	}*/
	
	public static void restartButton(JPanel panel) {
		final JButton restartButton = new JButton("Restart");
		
		GridBagConstraints c = new GridBagConstraints();
		c.gridx = 0;
		c.gridy = 0;
		c.insets = new Insets(0, 0, 50, 0);
	//	c.anchor = GridBagConstraints.LAST_LINE_END;
		panel.add(restartButton, c);
		
		class RestartListener implements ActionListener {
			public void actionPerformed(ActionEvent event){
				PuzzlePanel.restart();
			}
		}
		ActionListener restart = new RestartListener();
		restartButton.addActionListener(restart);
	
	}
	
	public static void solveButton(JPanel panel) {
		final JButton solveButton = new JButton("Solve");
		
		class SolveListener implements ActionListener {
			public void actionPerformed(ActionEvent event){
				PuzzlePanel.solve();
			}
		}
		
		ActionListener solve = new SolveListener();
		solveButton.addActionListener(solve);
	//	solveButton.setBounds(100, 0, 100, 50);
		GridBagConstraints c = new GridBagConstraints();
		c.gridx = 1;
		c.gridy = 0;
		c.insets = new Insets(0, 0, 50, 0);
	//	c.anchor = GridBagConstraints.EAST;
		panel.add(solveButton,c);	
	}
	
	public static void rotateButton(JPanel panel, final Piece piece) {
		final JButton rotateButton = new JButton("Rotate Right");
		
		class PieceListener implements ActionListener {
			public void actionPerformed(ActionEvent event){
				PieceComponent.rotate(piece, 1);
			}
		}
		
		ActionListener rotate = new PieceListener();
		rotateButton.addActionListener(rotate);
	//	solveButton.setBounds(100, 0, 100, 50);
		GridBagConstraints c = new GridBagConstraints();
		c.gridx = 1;
		c.gridy = 0;
		c.insets = new Insets(0, 0, 50, 0);
	//	c.anchor = GridBagConstraints.EAST;
		panel.add(rotateButton,c);	
	}
	
	public static void addBoard(JPanel panel) {
		
		final JPanel board=new JPanel(new GridBagLayout()); //layout??
	
		board.setBackground(Color.blue);
		board.setVisible(true);
		
		GridBagConstraints c = new GridBagConstraints();
//		c.gridwidth=2;
//		c.gridheight=2;
//		c.gridx = 3;
//		c.gridy = 0;
		c.insets = new Insets(10, 10, 10,10);
//		c.fill = GridBagConstraints.BOTH;
	//	c.anchor = GridBagConstraints.EAST;
		panel.add(board);
		
		//drag listener?
	
	}
	
	public static void addPieces(JPanel panel) {
		
			final JPanel pieces=new JPanel(); //layout??
	
			pieces.setBounds(0, 0, 200, 300);
		//	pieces.setSize(100, 300);
			pieces.setBackground(Color.blue);
			pieces.setVisible(true);
			
			GridBagConstraints c = new GridBagConstraints();
			//	c.gridwidth=3;
			//	c.gridheight=6;
		//	c.gridx = 0;
			//c.gridy = 0;
			c.insets = new Insets(10, 10, 10, 10);
		//	c.fill = GridBagConstraints.BOTH;
		//	c.anchor = GridBagConstraints.EAST;
			panel.add(pieces);
			
			//drag listener?
		
		}
	
	public static void main(String[] args){
		final JFrame frame = makeFrame(600,600);
		final GridComponent g = new GridComponent();
		final JPanel panel = new JPanel(new GridBagLayout());
		//final JPanel panel1= new JPanel(new GridBagLayout());
		frame.add(g);
		frame.add(panel,BorderLayout.NORTH);
		//frame.add(panel,BorderLayout.EAST);
		
	
		panel.setVisible(true);
		restartButton(panel);
		solveButton(panel);
	//	addBoard(panel);
	//	addPieces(panel);	
		
		
	}
}

	           
