import javax.swing.JComponent;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JFrame;
import javax.swing.Timer;

public class RotatingLine extends JComponent{
	
	private static final Line line = new Line();
	private JFrame frame;
	private Color color;
	
	public RotatingLine(JFrame frame) {
		this.frame = frame;
	}

	public void changeColor(Color color) {
		this.color = color;
	}
	
	public void paintComponent(Graphics g) {
		Graphics2D g2 = (Graphics2D) g;
		
		g2.setBackground(Color.LIGHT_GRAY);
		g2.clearRect(0, 0, frame.getContentPane().getWidth(), frame.getContentPane().getHeight());
		
		g2.setColor(color);
		
		double smallerAngle = line.getAngle() % Math.PI; // Convert the line's rotation into something less than pi radians
		int centerX = frame.getContentPane().getWidth() / 2;
		int centerY = frame.getContentPane().getHeight() / 2;
		
		if (smallerAngle >= 0 && smallerAngle < Math.PI / 4) {
			g2.drawLine((int) (centerX - centerY * Math.tan(smallerAngle)), 0, centerX, centerY);
			g2.drawLine(centerX, centerY, (int) (centerX + centerY * Math.tan(smallerAngle)), frame.getContentPane().getHeight());
		}
		else if (smallerAngle == Math.PI / 4) {
			g2.drawLine(0, 0, frame.getContentPane().getWidth(), frame.getContentPane().getHeight());
		}
		else if (smallerAngle > Math.PI / 4 && smallerAngle < 3 * Math.PI / 4) {
			double complement = Math.PI / 2 - smallerAngle;
			g2.drawLine(0, (int) (centerY - centerX * Math.tan(complement)), centerX, centerY);
			g2.drawLine(centerX, centerY, frame.getContentPane().getWidth(), (int) (frame.getContentPane().getHeight() - centerY + centerX * Math.tan(complement)));
		}
		else if (smallerAngle == 3 * Math.PI / 4) {
			g2.drawLine(0, frame.getContentPane().getHeight(), frame.getContentPane().getWidth(), 0);
		} else {
			double supplement = Math.PI - smallerAngle;
			g2.drawLine((int) (centerX - centerY * Math.tan(supplement)), frame.getContentPane().getHeight(), centerX, centerY);
			g2.drawLine(centerX, centerY, (int) (centerX + centerY * Math.tan(supplement)), 0);
		}	
	}
	
	public void rotate(double angle) {
		line.rotate(angle);
		repaint();
	}
		
	public static void main(String[] args) {
		
		JFrame frame = new JFrame();
		final RotatingLine line = new RotatingLine(frame);
		frame.add(line);
		
		class TimerListener implements ActionListener {

			public void actionPerformed(ActionEvent event) {

				line.rotate(0.02);
			}
		}
		
		frame.setSize(1000, 1000);
		frame.setTitle("Rotating Line Project");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setVisible(true);
		
		ActionListener listener = new TimerListener();

		final int DELAY = 30;
		Timer t = new Timer(DELAY, listener);
		t.start();
	}	
}
